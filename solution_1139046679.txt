import sys
sys.setrecursionlimit(10000)

def priya():
    L, cache, primes = 100, {}, []
    is_prime = [True] * (L + 1)
    for i in range(2, int(L ** 0.5) + 1):
        if is_prime[i]:
            for j in range(i * i, L + 1, i):
                is_prime[j] = False
    primes = [p for p in range(2, L + 1) if is_prime[p]]
    
    def klu(mask):
        if mask in cache:
            return cache[mask]
        for j, p in enumerate(primes):
            if not (mask >> j) & 1:
                cache[mask] = p
                return p
        next_prime = primes[-1] + 1
        while any(next_prime % p == 0 for p in primes):
            next_prime += 1
        cache[mask] = next_prime
        return next_prime
    
    def arya(node, parent, mask):
        total = klu(mask)
        for neighbor in graph[node]:
            if neighbor != parent:
                total += arya(neighbor, node, mask & masks[neighbor])
        return total
    
    data = sys.stdin.read().split()
    if not data:
        return
    idx, T = 1, int(data[0])
    out = []
    for _ in range(T):
        N = int(data[idx])
        idx += 1
        values = list(map(int, data[idx:idx + N]))
        idx += N
        graph = [[] for _ in range(N)]
        for _ in range(N - 1):
            u, v = int(data[idx]) - 1, int(data[idx + 1]) - 1
            idx += 2
            graph[u].append(v)
            graph[v].append(u)
        
        masks = [sum(1 << j for j, p in enumerate(primes) if values[i] % p == 0) for i in range(N)]
        out.append(" ".join(map(str, [arya(i, -1, masks[i]) for i in range(N)])))
    sys.stdout.write("\n".join(out) + "\n")

if __name__ == "__main__":
    priya()
